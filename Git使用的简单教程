1.	安装Git(找资料很简单)
	yum -y install git
2.	创建版本仓库(repository)
	mkdir learngit
	cd learngit
3.	初始化版本库   
	git init 会多出一个隐藏文件  .git
4.	提交一个/多个文件到版本库中（两步）
	git add 文件名1 文件名2
	git commit -m 提交说明    （-m参数后接此次提交内容的说明信息）
5.	查看版本历史记录：
	git log	可以添加参数更简洁的显示（--pretty=oneline）
6.	返回当前版本的上一个版本：
	git reset --hard HEAD^
7.	上上个版本：
	git reset --hard HEAD^^
8.	退回前100个版本：
	git reset --hard HEAD~100
9.	回到未来某个版本：
	git reset --hard [commit_id]
10.	历史命令：
	git reflog
11.	查看git状态：
	git status -s
12.	Git提交分为三个区域，分别是工作区，暂存区，分支，我们进行git add操作时是把工作区的内容提交到暂存区，然后进行
	git commit操作时把暂存区的内容提交到分支中去，这样暂存区的内容也就为空了，假如对一个文件进行第一次修改，然后只执行add不执行commit操作，再进行第二次对该文件进行修改，然后最后commit提交，在这样的情况下只会提交第一次修改，不会提交第二次修改，因为commit提交是把暂存区的内容提交到分支中去的。
13.	丢弃工作区的修改或者将暂存区内容退回到add前的状态：
	git checkout -- 文件
14.	将暂存区的的修改退回到工作区：
	git reset HEAD 文件
15.	删除文件：
	当我们commit一个文件到git分支的时候，后期把该文件从工作区中删除了，如果是确实要进行删除，那分支中还存在该文件，而工作区中不存在该文件则产生差别，所以要把分支中的该文件也进行删除使用 git rm 文件名  并可以commit一下说明
	如果是误删，则可以从分支上恢复到工作区  git checkout -- 文件删除远程上的文件
16.	git rm -r --cached a/2.txt                    
	删除远程上a目录下的2.txt文件 
17.	git push 
	git commit -m  "删除a目录下的2.txt文件"  // commit
18.	git push origin :lin
	删除远程上的分支(删除远程上的lin这个分支)
19.	git branch
	查看分支
20.	git branch <name>
	创建分支
21.	git checkout <name>
	切换分支
22.	git checkout -b <name>
	创建+切换分支
23.	git merge <name>
	合并某分支到当前分支
24.	git branch -d <name>
	删除分支
25.	git branch -D <name>
	当分支还没被合并时候删除会报错，强制删除
26.	合并分支前的步骤操作应该是：先创建一个分支，对分支文件里面的内容进行编辑，并使用add和commit，然后切换回
	master分支，进行git merge 刚才修改的分支，最后删除分支
27.	bug分支突遇bug操作例子
	当遇到在一个分支上操作文件时候，突然另一边出现一个bug需要马上修复，这个时候必须停下当前当前分支先
	修复一下bug，该怎么操作呢？只能把当前分支上的工作区先存储起来使用(git stash)，然后创建分支进行操作bug修复
	，当bug修复完毕的时候，并确保已经合并到主分支上了，再使用git stash list查看所隐藏起来的分支，
	并使用git stash apply stash@{0}来还原分支，并继续操作这个分支
28.	多人协作操作
	查看远程库信息
	git remote -v
	本地新建的分支如果不推送到远程，其他人是不可见的。从本地推送分支，使用git push origin <分支名称>，如果推送失败，先用git pull抓取远程的最新提交。远程抓取某一分支上的代码：git pull origin master。
	从本地创建和远程一致的分支 git checkout -b <分支名称> origin/<分支名称>。建立本地分支和远程分支的
	关联git branch --set-upstream <分支> origin/<分支>。从远程抓取分支，使用git pull，如果有冲突
	要先处理冲突
29.	添加远程库：
	首先在github上拥有账号并创建一个版本库（repository），会有提示的命令。在对应工作区中执行：
	git remote add origin 远程库地址以git@github.com开头。上面命令如果执行错误可通过执行命令：
	git remote rm origin然后在执行命令提交到远程github上git push -u origin master上面的执行如果
	报Perssion denied(publickey)错误则是ssh的公钥引起的，需要在github上将Linux中的ssh公钥放入，Linux上的ssh公钥位置一般是在/root/.ssh/id_rsa.pub中（如果不存在该文件则执行ssh-keygen命令会创建该文件）后期只要修改了文件并同步
	到github上时只要执行：git push origin master就可以了
	将github上的远程库克隆到自己的电脑上：首先还是创建一个可被克隆的仓库，然后进入这个仓库在clone or download下存在ssh地址，使用命令：git clone git@github.com:helloxiaoputi/myRepository.git可以把该库克隆到自己的电脑上
30.	服务端初始化一个带有readme的仓库，第一次拉取需要强制合并
	git pull origin master --allow-unrelated-histories
31.	当克隆下来的内容进行添加到缓存区在提交到本地git上后，想要使用git push提交的时候返回了403错误，这个时候需要设置一下远程ssh
	git remote set-url origin git@github.com:githelloxiaoputi/git_phalapi.git再提交就正常了

Git 常用命令

git branch -a 查看所有的分支

git branch -r 查看本地所有分支

git commit -am "init" 提交并且加注释则不需要再使用git add .

git remote show origin 显示远程库origin里的资源

git push origin master:develop

git push origin master:hb-dev 将本地库与服务器上的库进行关联

git checkout --track origin/dev 切换到远程dev分支

git branch -D master develop 删除本地库develop

git checkout -b dev 建立一个新的本地分支dev

git merge origin/dev 将分支dev与当前分支进行合并

git checkout dev 切换到本地dev分支

git config --list 看所有用户

git ls-files 看已经被提交的

git commit -v 当你用－v参数的时候可以看commit的差异

git diff 查看尚未暂存的更新

git rm a.a 移除文件(从暂存区和工作区中删除)

git rm --cached a.a 移除文件(只从暂存区中删除)

git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)

git stash push 将文件给push到一个临时空间中

git stash pop 将文件从临时空间pop下来

git fetch 相当于是从远程获取最新版本到本地，不会自动merge

git commit -a -m "log_message" (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：

git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0

git checkout branch_1.0/master 切换到branch_1.0/master分支























